osago-agregator будет содержать две части, одна часть координации запросов на предложения, вторая часть - серия адаптеров (преобразователей интерфейсов) к различным страховым.
Допускаю что интеграция со страховыми компаниями может быть реализована различными способами, например:
- через http(s) запросы на предложения, а затем с заданной частотой проверкой наличия предложения, 
- с использованием http(s) запросов и веб-хуков,
- может быть с использованием long pooling запросов и т.п.


1. Требуется ли ему своё хранилище данных?
Думаю, что в зависимости от реализации адаптеров хранилище может потребоваться, чтобы запоминать с какими идентификаторами запросов нужно сходить в сервис страховых компаний и перезапросить статус предложения.

2. Какой API он предоставляет core-app?
osago-aggregator публикует события в шине. Событие содержит данные по продукту и тарифу с указанием correlation идентификатора запроса.

3. Определите средство интеграции между сервисами core-app и osago-aggregator.
На предыдущем шаге предложено добавить kafka в интеграцию с аналогичным сервисом. Такой же event driven подход предлагается сохранить и тут. osago_aggregator будет по мере получения от адаптеров предложений добавлять события в топик Kafka. core-app по мере появления событий отображает новые предложения пользователю в ограниченном периоде времени. События полученные позже, уже не рассматриваются. Судя по всему osago-aggregator должен иметь параметр длительности периода ожидания, в течении которого делать попытки получить пердложения. По истечению периода закрывать соединения принудительно и более не читать источники.


4. Подумайте над API для веб-приложения в core-app.
Думаю что веб приложение также должно будет поддерживать асинхронное появление предложений по ОСАГО. Для получения асинхронно предложений в том числе использовал бы server push подход по мере появления событий. Думаю что API могло бы быть таким: 

4.1 getOSAGOOffers(customer, underwriters, auto) - предоставляет core-app для инициации запроса в страховые
4.2 событие типа offer { duration, tariff, timeLimit, insuranceCompany, requestId }


5. Определите средство интеграции между веб-приложением и core-app. Если будете использовать средство, отличное от REST, отразите интеграцию новой стрелкой.
Кажется описал выше. 

6. В зависимости от выбранных средств интеграции подумайте, требуется ли где-то применение паттернов отказоустойчивости:
- Rate Limiting, - думаю что нет, не потребуется. Скорее такой паттерн потребуется со стоороны страховых компаний.
- Circuit Breaker, - думаю, что нет, потому что хоть и вероятны ошибки от страховых они никак не повлияют на систему. Если по какой-то интеграции пришла ошибка, мы просто предложение от данной страховой не предлагаем пользователю и всё.  
- Retry, - в принципе возможно использовать для запроса страховых, потому что в интеграциях возможны ошибки и ограничения на запросы, которые в течении времени могут стать не актуальными. Возможно использовать с ограничениями, что не более например 3 ретраев и не более заданного ограничения по времени ожидания предложений. 
- Timeout - запросы во внешние системы нужно ограничить таймаутом, да.

7. Примите во внимание, что сервисы задеплоены в нескольких экземплярах. Подумайте, зависит ли ваше решение от этого.
osago-aggregator я думаю построить без хранения каких-либо состояний, stateless, поэтому будет незаивсимы.